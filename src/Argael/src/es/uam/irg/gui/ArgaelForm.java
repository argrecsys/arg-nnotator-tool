/**
 * Copyright 2022
 * Andr√©s Segura-Tinoco
 * Information Retrieval Group at Universidad Autonoma de Madrid
 *
 * This is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This software is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * the current software. If not, see <http://www.gnu.org/licenses/>.
 */
package es.uam.irg.gui;

import es.uam.irg.data.ArgumentModel;
import es.uam.irg.data.ArgumentNode;
import es.uam.irg.data.DataManager;
import es.uam.irg.data.SelectedItems;
import es.uam.irg.data.TreeNode;
import es.uam.irg.io.IOManager;
import es.uam.irg.utils.FileUtils;
import es.uam.irg.utils.FunctionUtils;
import es.uam.irg.utils.StringUtils;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 * Argument annotation and evaluation form class (main GUI class.)
 */
public class ArgaelForm extends javax.swing.JFrame {

    // GUI constants
    private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
    private static final String DECIMAL_FORMAT = "0.000";
    private static final String HTML_CONTENT_TYPE = "text/html";
    private static final String USERS_FILEPATH = "Resources/config/users.txt";

    // GUI variables
    private String currDataFolder;
    private String currEntity;
    private int currTabIndex;
    private final SelectedItems acSelected;
    private final ArgumentModel argModel;
    private final DataManager dataModel;
    private final Map<String, String> files;
    private Map<String, Integer> commentDepthList;
    private String fileExtension;
    private final ReportFormatter formatter;
    private String userName;

    /**
     * Creates new ARGAEL form.
     *
     * @param dataFolder
     * @param resultFolder
     * @param fileExtension
     * @param components
     * @param relCategories
     * @param relIntents
     * @param qualityMetrics
     */
    public ArgaelForm(String dataFolder, String resultFolder, String fileExtension, List<String> components, List<String> relCategories, List<String> relIntents, List<String> qualityMetrics) {
        initComponents();

        this.currDataFolder = "";
        this.currEntity = "";
        this.currTabIndex = 0;
        this.acSelected = new SelectedItems();
        this.argModel = new ArgumentModel(components, relCategories, relIntents, qualityMetrics);
        this.dataModel = new DataManager(resultFolder);
        this.files = new HashMap<>();
        this.fileExtension = fileExtension;
        this.formatter = new ReportFormatter(DECIMAL_FORMAT, DATE_FORMAT);

        this.setTablesLookAndFeel();
        this.setComboBoxes();
        this.setVisible(true);
        this.setAppUsers();
        this.importDocsFromDirectory(dataFolder);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDocList = new javax.swing.JLabel();
        scrollPane1 = new javax.swing.JScrollPane();
        lstDocs = new javax.swing.JList<>();
        tabbedPane = new javax.swing.JTabbedPane();
        pnlIndependentAnnotation = new javax.swing.JPanel();
        lblAddAC = new javax.swing.JLabel();
        cmbACType = new javax.swing.JComboBox<>();
        btnAddAC = new javax.swing.JButton();
        scrollPane2 = new javax.swing.JScrollPane();
        edtSimpleAnnotation = new javax.swing.JEditorPane();
        lblAddArgRel = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox<>();
        cmbIntent = new javax.swing.JComboBox<>();
        btnAddAR = new javax.swing.JButton();
        scrollPane3 = new javax.swing.JScrollPane();
        tblArgComponents = new javax.swing.JTable();
        lblNumberArguments = new javax.swing.JLabel();
        lblDelete = new javax.swing.JLabel();
        btnDeleteAC = new javax.swing.JButton();
        btnDeleteAR = new javax.swing.JButton();
        scrollPane4 = new javax.swing.JScrollPane();
        tblArgRelations = new javax.swing.JTable();
        lblNumberRelations = new javax.swing.JLabel();
        scrollPane5 = new javax.swing.JScrollPane();
        txtAnnotationPreview = new javax.swing.JEditorPane();
        pnlAssistedAnnotation = new javax.swing.JPanel();
        lblTargetAnnotator1 = new javax.swing.JLabel();
        cmbTargetAnnotator = new javax.swing.JComboBox<>();
        scrollPane6 = new javax.swing.JScrollPane();
        edtTargetAnnotation = new javax.swing.JEditorPane();
        scrollPane7 = new javax.swing.JScrollPane();
        tblArgRelations2 = new javax.swing.JTable();
        lblAddAC1 = new javax.swing.JLabel();
        cmbACType1 = new javax.swing.JComboBox<>();
        btnAddAC1 = new javax.swing.JButton();
        lblAddArgRel1 = new javax.swing.JLabel();
        cmbCategory1 = new javax.swing.JComboBox<>();
        cmbIntent1 = new javax.swing.JComboBox<>();
        btnAddAR1 = new javax.swing.JButton();
        lblDelete1 = new javax.swing.JLabel();
        btnDeleteAC1 = new javax.swing.JButton();
        btnDeleteAR1 = new javax.swing.JButton();
        scrollPane8 = new javax.swing.JScrollPane();
        edtAssistedAnnotation = new javax.swing.JEditorPane();
        scrollPane9 = new javax.swing.JScrollPane();
        tblArgComponents1 = new javax.swing.JTable();
        lblNumberArguments1 = new javax.swing.JLabel();
        scrollPane10 = new javax.swing.JScrollPane();
        tblArgRelations1 = new javax.swing.JTable();
        lblNumberRelations1 = new javax.swing.JLabel();
        pnlEvaluation = new javax.swing.JPanel();
        lblTargetAnnotator = new javax.swing.JLabel();
        cmbAnnotator = new javax.swing.JComboBox<>();
        btnSaveEval = new javax.swing.JButton();
        scrollPane15 = new javax.swing.JScrollPane();
        edtEvalAnnotation = new javax.swing.JEditorPane();
        scrollPane11 = new javax.swing.JScrollPane();
        tblEvalComponents = new javax.swing.JTable();
        lblNumberArguments2 = new javax.swing.JLabel();
        scrollPane12 = new javax.swing.JScrollPane();
        tblEvalRelations = new javax.swing.JTable();
        lblNumberRelations2 = new javax.swing.JLabel();
        scrollPane13 = new javax.swing.JScrollPane();
        txtEvaluationPreview = new javax.swing.JEditorPane();
        pnlArgumentTree = new javax.swing.JPanel();
        scrollPane14 = new javax.swing.JScrollPane();
        edtArgumentTree = new javax.swing.JEditorPane();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        mItemImportJsonl = new javax.swing.JMenuItem();
        mItemImportText = new javax.swing.JMenuItem();
        mItemExport = new javax.swing.JMenuItem();
        menuHorzSeparator = new javax.swing.JPopupMenu.Separator();
        mItemClose = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        mItemAbout = new javax.swing.JMenuItem();
        menuUser = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ARGAEL v1.0");
        setMinimumSize(new java.awt.Dimension(1111, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblDocList.setText("Document list:");

        lstDocs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstDocs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstDocsValueChanged(evt);
            }
        });
        scrollPane1.setViewportView(lstDocs);

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        lblAddAC.setText("Annotate AC:");

        btnAddAC.setText("Add");
        btnAddAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddACActionPerformed(evt);
            }
        });

        edtSimpleAnnotation.setEditable(false);
        edtSimpleAnnotation.setContentType(HTML_CONTENT_TYPE);
        scrollPane2.setViewportView(edtSimpleAnnotation);

        lblAddArgRel.setText("Annotate AR:");

        btnAddAR.setText("Add");
        btnAddAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddARActionPerformed(evt);
            }
        });

        tblArgComponents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgComponents.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblArgComponents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgComponentsMouseClicked(evt);
            }
        });
        scrollPane3.setViewportView(tblArgComponents);

        lblNumberArguments.setText("Number of argument components (ACs): 0");

        lblDelete.setText("Delete:");

        btnDeleteAC.setText("AC");
        btnDeleteAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteACActionPerformed(evt);
            }
        });

        btnDeleteAR.setText("AR");
        btnDeleteAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteARActionPerformed(evt);
            }
        });

        tblArgRelations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgRelations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblArgRelations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgRelationsMouseClicked(evt);
            }
        });
        scrollPane4.setViewportView(tblArgRelations);

        lblNumberRelations.setText("Number of argument relations (ARs): 0");

        scrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtAnnotationPreview.setEditable(false);
        txtAnnotationPreview.setContentType(HTML_CONTENT_TYPE);
        scrollPane5.setViewportView(txtAnnotationPreview);

        javax.swing.GroupLayout pnlIndependentAnnotationLayout = new javax.swing.GroupLayout(pnlIndependentAnnotation);
        pnlIndependentAnnotation.setLayout(pnlIndependentAnnotationLayout);
        pnlIndependentAnnotationLayout.setHorizontalGroup(
            pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNumberArguments))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                                        .addComponent(lblNumberRelations)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(scrollPane5)))
                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblAddAC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbACType, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddAC)
                        .addGap(18, 18, 18)
                        .addComponent(lblAddArgRel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbIntent, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddAR)
                        .addGap(18, 18, 18)
                        .addComponent(lblDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteAC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteAR)))
                .addContainerGap())
        );
        pnlIndependentAnnotationLayout.setVerticalGroup(
            pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlIndependentAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddAC)
                    .addComponent(cmbACType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddAC)
                    .addComponent(lblAddArgRel)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddAR)
                    .addComponent(cmbIntent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDelete)
                    .addComponent(btnDeleteAR)
                    .addComponent(btnDeleteAC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                            .addComponent(scrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNumberRelations)
                            .addComponent(lblNumberArguments))
                        .addGap(18, 18, 18)
                        .addComponent(scrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane2))
                .addContainerGap())
        );

        tabbedPane.addTab("Independent Annotation", pnlIndependentAnnotation);

        lblTargetAnnotator1.setText("Target annotator:");

        cmbTargetAnnotator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTargetAnnotatorActionPerformed(evt);
            }
        });

        edtTargetAnnotation.setEditable(false);
        edtTargetAnnotation.setContentType(HTML_CONTENT_TYPE);
        scrollPane6.setViewportView(edtTargetAnnotation);

        tblArgRelations2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgRelations2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblArgRelations2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgRelations2MouseClicked(evt);
            }
        });
        scrollPane7.setViewportView(tblArgRelations2);

        lblAddAC1.setText("Annotate AC:");

        btnAddAC1.setText("Add");
        btnAddAC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAC1ActionPerformed(evt);
            }
        });

        lblAddArgRel1.setText("Annotate AR:");

        btnAddAR1.setText("Add");
        btnAddAR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAR1ActionPerformed(evt);
            }
        });

        lblDelete1.setText("Delete:");

        btnDeleteAC1.setText("AC");
        btnDeleteAC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAC1ActionPerformed(evt);
            }
        });

        btnDeleteAR1.setText("AR");
        btnDeleteAR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAR1ActionPerformed(evt);
            }
        });

        edtAssistedAnnotation.setEditable(false);
        edtAssistedAnnotation.setContentType(HTML_CONTENT_TYPE);
        scrollPane8.setViewportView(edtAssistedAnnotation);

        tblArgComponents1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgComponents1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblArgComponents1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgComponents1MouseClicked(evt);
            }
        });
        scrollPane9.setViewportView(tblArgComponents1);

        lblNumberArguments1.setText("Number of argument components (ACs): 0");

        tblArgRelations1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgRelations1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblArgRelations1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgRelations1MouseClicked(evt);
            }
        });
        scrollPane10.setViewportView(tblArgRelations1);

        lblNumberRelations1.setText("Number of argument relations (ARs): 0");

        javax.swing.GroupLayout pnlAssistedAnnotationLayout = new javax.swing.GroupLayout(pnlAssistedAnnotation);
        pnlAssistedAnnotation.setLayout(pnlAssistedAnnotationLayout);
        pnlAssistedAnnotationLayout.setHorizontalGroup(
            pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                    .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(lblTargetAnnotator1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbTargetAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(lblAddAC1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbACType1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddAC1)
                        .addGap(18, 18, 18)
                        .addComponent(lblAddArgRel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCategory1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbIntent1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddAR1)
                        .addGap(18, 18, 18)
                        .addComponent(lblDelete1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteAC1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteAR1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(scrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPane9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                            .addComponent(lblNumberArguments1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scrollPane10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(lblNumberRelations1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlAssistedAnnotationLayout.setVerticalGroup(
            pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAddAC1)
                        .addComponent(cmbACType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddAC1))
                    .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddAR1)
                        .addComponent(cmbIntent1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDelete1)
                        .addComponent(btnDeleteAC1)
                        .addComponent(btnDeleteAR1)
                        .addComponent(cmbCategory1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAddArgRel1))
                    .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTargetAnnotator1)
                        .addComponent(cmbTargetAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(scrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumberArguments1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(scrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumberRelations1))
                    .addComponent(scrollPane8)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(scrollPane6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tabbedPane.addTab("Assisted Annotation", pnlAssistedAnnotation);

        lblTargetAnnotator.setText("Target annotator:");

        cmbAnnotator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAnnotatorActionPerformed(evt);
            }
        });

        btnSaveEval.setText("Save");
        btnSaveEval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveEvalActionPerformed(evt);
            }
        });

        edtEvalAnnotation.setEditable(false);
        edtEvalAnnotation.setContentType(HTML_CONTENT_TYPE);
        scrollPane15.setViewportView(edtEvalAnnotation);

        tblEvalComponents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type", "Evaluation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvalComponents.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblEvalComponents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEvalComponentsMouseClicked(evt);
            }
        });
        scrollPane11.setViewportView(tblEvalComponents);

        lblNumberArguments2.setText("Argument components (ACs)");

        tblEvalRelations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent", "Evaluation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvalRelations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblEvalRelations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEvalRelationsMouseClicked(evt);
            }
        });
        scrollPane12.setViewportView(tblEvalRelations);

        lblNumberRelations2.setText("Argument relations (ARs)");

        scrollPane13.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtEvaluationPreview.setEditable(false);
        txtEvaluationPreview.setContentType(HTML_CONTENT_TYPE);
        scrollPane13.setViewportView(txtEvaluationPreview);

        javax.swing.GroupLayout pnlEvaluationLayout = new javax.swing.GroupLayout(pnlEvaluation);
        pnlEvaluation.setLayout(pnlEvaluationLayout);
        pnlEvaluationLayout.setHorizontalGroup(
            pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEvaluationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEvaluationLayout.createSequentialGroup()
                        .addComponent(lblTargetAnnotator)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveEval))
                    .addComponent(scrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEvaluationLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(scrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumberRelations2)))
                    .addGroup(pnlEvaluationLayout.createSequentialGroup()
                        .addComponent(lblNumberArguments2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane13, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnlEvaluationLayout.setVerticalGroup(
            pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEvaluationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTargetAnnotator)
                    .addComponent(cmbAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveEval))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEvaluationLayout.createSequentialGroup()
                        .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                            .addComponent(scrollPane12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumberArguments2)
                            .addComponent(lblNumberRelations2))
                        .addGap(18, 18, 18)
                        .addComponent(scrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane15))
                .addContainerGap())
        );

        lblTargetAnnotator.getAccessibleContext().setAccessibleName("Select annotator:");

        tabbedPane.addTab("Evaluation", pnlEvaluation);

        edtArgumentTree.setEditable(false);
        edtArgumentTree.setContentType(HTML_CONTENT_TYPE);
        scrollPane14.setViewportView(edtArgumentTree);

        javax.swing.GroupLayout pnlArgumentTreeLayout = new javax.swing.GroupLayout(pnlArgumentTree);
        pnlArgumentTree.setLayout(pnlArgumentTreeLayout);
        pnlArgumentTreeLayout.setHorizontalGroup(
            pnlArgumentTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlArgumentTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 1513, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlArgumentTreeLayout.setVerticalGroup(
            pnlArgumentTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlArgumentTreeLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(scrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Argument Tree", pnlArgumentTree);

        menuFile.setText("Docs");

        mItemImportJsonl.setText("Import from Jsonl");
        mItemImportJsonl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemImportJsonlActionPerformed(evt);
            }
        });
        menuFile.add(mItemImportJsonl);

        mItemImportText.setText("Import from Text");
        mItemImportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemImportTextActionPerformed(evt);
            }
        });
        menuFile.add(mItemImportText);

        mItemExport.setText("Export files");
        mItemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemExportActionPerformed(evt);
            }
        });
        menuFile.add(mItemExport);
        menuFile.add(menuHorzSeparator);

        mItemClose.setText("Close");
        mItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCloseActionPerformed(evt);
            }
        });
        menuFile.add(mItemClose);

        menuBar.add(menuFile);

        menuHelp.setText("Help");

        mItemAbout.setText("About");
        mItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(mItemAbout);

        menuBar.add(menuHelp);

        menuUser.setText("| User:");
        menuBar.add(menuUser);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDocList))
                .addGap(18, 18, 18)
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDocList)
                        .addGap(9, 9, 9)
                        .addComponent(scrollPane1))
                    .addComponent(tabbedPane))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        closeForm();
    }//GEN-LAST:event_formWindowClosing

    private void lstDocsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDocsValueChanged
        // TODO add your handling code here:
        if (!lstDocs.isSelectionEmpty() && !evt.getValueIsAdjusting()) {
            currEntity = lstDocs.getSelectedValue();
            updateViewData();
        }
    }//GEN-LAST:event_lstDocsValueChanged

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        // TODO add your handling code here:
        currTabIndex = tabbedPane.getSelectedIndex();
        updateViewData();
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void mItemImportJsonlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemImportJsonlActionPerformed
        // TODO add your handling code here:
        this.fileExtension = IOManager.DocExt.JSONL.toString();
        importDocsFromDirectory();
    }//GEN-LAST:event_mItemImportJsonlActionPerformed

    private void mItemImportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemImportTextActionPerformed
        // TODO add your handling code here:
        this.fileExtension = IOManager.DocExt.TXT.toString();
        importDocsFromDirectory();
    }//GEN-LAST:event_mItemImportTextActionPerformed

    private void mItemExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemExportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mItemExportActionPerformed

    private void mItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCloseActionPerformed
        // TODO add your handling code here:
        closeForm();
    }//GEN-LAST:event_mItemCloseActionPerformed

    private void mItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemAboutActionPerformed
        // TODO add your handling code here:
        String aboutMsg = """
                          ARGAEL: ARGument Annotation and Evaluation tooL
                          
                          Version: 1.1.0
                          Date: 07/07/2023
                          Created by: Andr\u00e9s Segura-Tinoco & Iv\u00e1n Cantador 
                          License: Apache License 2.0
                          Web site: https://argrecsys.github.io/argael/
                          """;

        JOptionPane.showMessageDialog(this, aboutMsg, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mItemAboutActionPerformed

    private void btnAddACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddACActionPerformed
        // TODO add your handling code here:
        boolean result = ArgaelFormUtils.createNewArgumentComponent(edtSimpleAnnotation, cmbACType, tblArgComponents);
        if (result) {
            saveViewData();
            updatePanelData(edtSimpleAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents));
            ArgaelFormUtils.updateCounterLabels(lblNumberArguments, tblArgComponents, "components (ACs)");
        }
    }//GEN-LAST:event_btnAddACActionPerformed

    private void btnAddAC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAC1ActionPerformed
        // TODO add your handling code here:
        boolean result = ArgaelFormUtils.createNewArgumentComponent(edtAssistedAnnotation, cmbACType1, tblArgComponents1);
        if (result) {
            saveViewData();
            updatePanelData(edtAssistedAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents1));
            ArgaelFormUtils.updateCounterLabels(lblNumberArguments1, tblArgComponents1, "components (ACs)");
        }
    }//GEN-LAST:event_btnAddAC1ActionPerformed

    private void btnAddARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddARActionPerformed
        // TODO add your handling code here:
        if (acSelected.size() == 2) {
            boolean result = ArgaelFormUtils.createNewArgumentRelation(acSelected.getValues(), tblArgComponents, cmbCategory, cmbIntent, tblArgRelations);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations, tblArgRelations, "relations (ARs)");
                acSelected.clear();
            }
        }
    }//GEN-LAST:event_btnAddARActionPerformed

    private void btnAddAR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAR1ActionPerformed
        // TODO add your handling code here:
        if (acSelected.size() == 2) {
            boolean result = ArgaelFormUtils.createNewArgumentRelation(acSelected.getValues(), tblArgComponents1, cmbCategory1, cmbIntent1, tblArgRelations1);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations1, tblArgRelations1, "relations (ARs)");
                acSelected.clear();
            }
        }
    }//GEN-LAST:event_btnAddAR1ActionPerformed

    private void btnDeleteACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteACActionPerformed
        // TODO add your handling code here:
        if (tblArgComponents.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentComponent(tblArgComponents, tblArgRelations);
            if (result) {
                saveViewData();
                updatePanelData(edtSimpleAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents));
                ArgaelFormUtils.updateCounterLabels(lblNumberArguments, tblArgComponents, "components (ACs)");
            }
        }
    }//GEN-LAST:event_btnDeleteACActionPerformed

    private void btnDeleteAC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAC1ActionPerformed
        // TODO add your handling code here:
        if (tblArgComponents1.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentComponent(tblArgComponents1, tblArgRelations1);
            if (result) {
                saveViewData();
                updatePanelData(edtAssistedAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents1));
                ArgaelFormUtils.updateCounterLabels(lblNumberArguments2, tblArgComponents1, "components (ACs)");
            }
        }
    }//GEN-LAST:event_btnDeleteAC1ActionPerformed

    private void btnDeleteARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteARActionPerformed
        // TODO add your handling code here:
        if (tblArgRelations.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentRelation(tblArgRelations, tblArgComponents);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations, tblArgRelations, "relations (ARs)");
                acSelected.clear();
                txtAnnotationPreview.setText("");
            }
        }
    }//GEN-LAST:event_btnDeleteARActionPerformed

    private void btnDeleteAR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAR1ActionPerformed
        // TODO add your handling code here:
        if (tblArgRelations1.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentRelation(tblArgRelations1, tblArgComponents1);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations2, tblArgRelations1, "relations (ARs)");
                acSelected.clear();
            }
        }
    }//GEN-LAST:event_btnDeleteAR1ActionPerformed

    private void tblArgComponentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgComponentsMouseClicked
        // TODO add your handling code here:
        int row = tblArgComponents.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            acSelected.addItem(row);
            updatePanelData(edtSimpleAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents));
        }
    }//GEN-LAST:event_tblArgComponentsMouseClicked

    private void tblArgComponents1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgComponents1MouseClicked
        // TODO add your handling code here:
        int row = tblArgComponents1.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            acSelected.addItem(row);
            updatePanelData(edtAssistedAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents1));
        }
    }//GEN-LAST:event_tblArgComponents1MouseClicked

    private void tblEvalComponentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEvalComponentsMouseClicked
        // TODO add your handling code here:
        int row = tblEvalComponents.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            acSelected.addItem(row);
            String targetUser = cmbAnnotator.getSelectedItem().toString();
            updatePanelData(edtEvalAnnotation, null, null, targetUser, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblEvalComponents));
        }
    }//GEN-LAST:event_tblEvalComponentsMouseClicked

    private void tblArgRelationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgRelationsMouseClicked
        // TODO add your handling code here:
        int row = tblArgRelations.rowAtPoint(evt.getPoint());
        ArgaelFormUtils.previewArgument(row, tblArgComponents, tblArgRelations, txtAnnotationPreview);
        updatePanelData(edtSimpleAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromRelTable(tblArgRelations));
    }//GEN-LAST:event_tblArgRelationsMouseClicked

    private void tblArgRelations1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgRelations1MouseClicked
        // TODO add your handling code here:
        int row = tblArgRelations1.rowAtPoint(evt.getPoint());
        ArgaelFormUtils.previewArgument(row, tblArgComponents1, tblArgRelations1, null);
        updatePanelData(edtAssistedAnnotation, null, null, userName, "", ArgaelFormUtils.getSelectedACIdsFromRelTable(tblArgRelations1));
    }//GEN-LAST:event_tblArgRelations1MouseClicked

    private void tblArgRelations2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgRelations2MouseClicked
        // TODO add your handling code here:
        int row = tblArgRelations2.rowAtPoint(evt.getPoint());
        String targetUser = cmbTargetAnnotator.getSelectedItem().toString();
        updatePanelData(edtTargetAnnotation, null, null, targetUser, "", ArgaelFormUtils.getSelectedACIdsFromRelTable(tblArgRelations2));
    }//GEN-LAST:event_tblArgRelations2MouseClicked

    private void tblEvalRelationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEvalRelationsMouseClicked
        // TODO add your handling code here:
        int row = tblEvalRelations.rowAtPoint(evt.getPoint());
        String targetUser = cmbAnnotator.getSelectedItem().toString();
        ArgaelFormUtils.previewArgument(row, tblEvalComponents, tblEvalRelations, txtEvaluationPreview);
        updatePanelData(edtEvalAnnotation, null, null, targetUser, "", ArgaelFormUtils.getSelectedACIdsFromRelTable(tblEvalRelations));
    }//GEN-LAST:event_tblEvalRelationsMouseClicked

    private void cmbTargetAnnotatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTargetAnnotatorActionPerformed
        // TODO add your handling code here:
        if (!StringUtils.isEmpty(currEntity)) {
            String targetUser = cmbTargetAnnotator.getSelectedItem().toString();
            updatePanelData(edtTargetAnnotation, null, tblArgRelations2, targetUser);
        }
    }//GEN-LAST:event_cmbTargetAnnotatorActionPerformed

    private void btnSaveEvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveEvalActionPerformed
        // TODO add your handling code here:
        saveViewData();
    }//GEN-LAST:event_btnSaveEvalActionPerformed

    private void cmbAnnotatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAnnotatorActionPerformed
        // TODO add your handling code here:
        updateViewData();
    }//GEN-LAST:event_cmbAnnotatorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAC;
    private javax.swing.JButton btnAddAC1;
    private javax.swing.JButton btnAddAR;
    private javax.swing.JButton btnAddAR1;
    private javax.swing.JButton btnDeleteAC;
    private javax.swing.JButton btnDeleteAC1;
    private javax.swing.JButton btnDeleteAR;
    private javax.swing.JButton btnDeleteAR1;
    private javax.swing.JButton btnSaveEval;
    private javax.swing.JComboBox<String> cmbACType;
    private javax.swing.JComboBox<String> cmbACType1;
    private javax.swing.JComboBox<String> cmbAnnotator;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbCategory1;
    private javax.swing.JComboBox<String> cmbIntent;
    private javax.swing.JComboBox<String> cmbIntent1;
    private javax.swing.JComboBox<String> cmbTargetAnnotator;
    private javax.swing.JEditorPane edtArgumentTree;
    private javax.swing.JEditorPane edtAssistedAnnotation;
    private javax.swing.JEditorPane edtEvalAnnotation;
    private javax.swing.JEditorPane edtSimpleAnnotation;
    private javax.swing.JEditorPane edtTargetAnnotation;
    private javax.swing.JLabel lblAddAC;
    private javax.swing.JLabel lblAddAC1;
    private javax.swing.JLabel lblAddArgRel;
    private javax.swing.JLabel lblAddArgRel1;
    private javax.swing.JLabel lblDelete;
    private javax.swing.JLabel lblDelete1;
    private javax.swing.JLabel lblDocList;
    private javax.swing.JLabel lblNumberArguments;
    private javax.swing.JLabel lblNumberArguments1;
    private javax.swing.JLabel lblNumberArguments2;
    private javax.swing.JLabel lblNumberRelations;
    private javax.swing.JLabel lblNumberRelations1;
    private javax.swing.JLabel lblNumberRelations2;
    private javax.swing.JLabel lblTargetAnnotator;
    private javax.swing.JLabel lblTargetAnnotator1;
    private javax.swing.JList<String> lstDocs;
    private javax.swing.JMenuItem mItemAbout;
    private javax.swing.JMenuItem mItemClose;
    private javax.swing.JMenuItem mItemExport;
    private javax.swing.JMenuItem mItemImportJsonl;
    private javax.swing.JMenuItem mItemImportText;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JPopupMenu.Separator menuHorzSeparator;
    private javax.swing.JMenu menuUser;
    private javax.swing.JPanel pnlArgumentTree;
    private javax.swing.JPanel pnlAssistedAnnotation;
    private javax.swing.JPanel pnlEvaluation;
    private javax.swing.JPanel pnlIndependentAnnotation;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane10;
    private javax.swing.JScrollPane scrollPane11;
    private javax.swing.JScrollPane scrollPane12;
    private javax.swing.JScrollPane scrollPane13;
    private javax.swing.JScrollPane scrollPane14;
    private javax.swing.JScrollPane scrollPane15;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JScrollPane scrollPane3;
    private javax.swing.JScrollPane scrollPane4;
    private javax.swing.JScrollPane scrollPane5;
    private javax.swing.JScrollPane scrollPane6;
    private javax.swing.JScrollPane scrollPane7;
    private javax.swing.JScrollPane scrollPane8;
    private javax.swing.JScrollPane scrollPane9;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tblArgComponents;
    private javax.swing.JTable tblArgComponents1;
    private javax.swing.JTable tblArgRelations;
    private javax.swing.JTable tblArgRelations1;
    private javax.swing.JTable tblArgRelations2;
    private javax.swing.JTable tblEvalComponents;
    private javax.swing.JTable tblEvalRelations;
    private javax.swing.JEditorPane txtAnnotationPreview;
    private javax.swing.JEditorPane txtEvaluationPreview;
    // End of variables declaration//GEN-END:variables

    /**
     * Closes winform.
     */
    private void closeForm() {
        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }

    /**
     *
     * @return
     */
    private String getCurrentReport() {
        String content = "";
        String filepath = currDataFolder + "\\" + currEntity + "." + fileExtension;
        String fileName = StringUtils.getLastToken(filepath, "\\\\");

        if (!fileName.equals("")) {
            if (files.containsKey(fileName)) {
                content = files.get(fileName);
            } else {
                String fileType = FileUtils.getFileExtension(filepath);
                content = IOManager.readTextFile(filepath);
                content = formatter.getPrettyReport(content, fileType, commentDepthList);
                files.put(fileName, content);
            }
        }

        return content;
    }

    /**
     *
     * @return
     */
    private List<ArgumentNode> getLlmArguments() {
        return dataModel.getLlmArguments(currEntity);
    }

    /**
     *
     * @param user
     * @return
     */
    private Map<String, List<String[]>> getUserAnnotations(String dataUser) {
        return dataModel.getUserAnnotations(currEntity, dataUser);
    }

    /**
     *
     * @param dataUser
     * @param evalUser
     * @return
     */
    private Map<String, Map<Integer, String>> getUserEvaluations(String dataUser, String evalUser) {
        return dataModel.getUserEvaluations(currEntity, dataUser, evalUser);
    }

    /**
     *
     * @return
     */
    private String[] getUserList() {
        List<String> annotators = IOManager.readUsers(USERS_FILEPATH);
        return annotators.toArray(new String[0]);
    }

    /**
     *
     * @param report
     * @param acList
     * @param selectedACIds
     * @return
     */
    private String highlightReport(String report, List<String[]> acList, List<Integer> selectedACIds) {
        String hlText;

        if (acList != null && selectedACIds != null) {
            // Sort the list based on the length of the second column (index 1)
            List<String[]> acListCopy = FunctionUtils.cloneListOfStrings(acList);
            Collections.sort(acListCopy, new ColumnLengthComparator(1).reversed());

            for (int i = 0; i < acListCopy.size(); i++) {
                String[] row = acListCopy.get(i);
                int acId = Integer.parseInt(row[0]);
                String acText = row[1];
                String acType = row[2];
                boolean acBold = selectedACIds.contains(acId);

                switch (acType.toLowerCase()) {
                    case "major claim":
                        hlText = formatter.highlightMajorClaim(acText, acBold);
                        break;
                    case "claim":
                        hlText = formatter.highlightClaim(acText, acBold);
                        break;
                    default:
                        hlText = formatter.highlightPremise(acText, acBold);
                        break;
                }
                report = report.replace(acText, hlText);
            }
        }

        return report;
    }

    /**
     *
     * @param report
     * @param arguments
     * @return
     */
    private String highlightReport(String report, List<ArgumentNode> arguments) {
        if (arguments != null) {

            for (ArgumentNode argument : arguments) {
                String argText = argument.getArgument();
                String argType = argument.getArgumentType().toUpperCase();
                String aspect = argument.getAspectName();
                String color = (argType.equals("SUPPORT") ? "#5CA066" : "#CC6666");
                String template = "<span><span style='font-weight: bold;'>[<span style='color:%s'>%s</span> - <span>%s</span>]</span> \"%s\"</span>";
                String hlText = String.format(template, color, argType, aspect, argText);
                report = report.replace(argText, hlText);
            }
        }
        return report;
    }

    /**
     *
     */
    private void importDocsFromDirectory() {
        importDocsFromDirectory("");
    }

    /**
     *
     * @param fileExt
     */
    private void importDocsFromDirectory(String dataFolder) {

        if (StringUtils.isEmpty(dataFolder)) {

            // Load document directory
            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory(new java.io.File("."));
            jfc.setDialogTitle("Select folder");
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jfc.setAcceptAllFileFilterUsed(false);

            if (jfc.showOpenDialog(ArgaelForm.this) == JFileChooser.APPROVE_OPTION) {
                currDataFolder = jfc.getSelectedFile().toString();
            }
        } else {
            currDataFolder = dataFolder;
        }

        // Import documents/files
        File file = new File(currDataFolder);
        if (file.isDirectory() && !StringUtils.isEmpty(fileExtension)) {
            List<String> docList = FileUtils.readFilenamesInFolder(currDataFolder, fileExtension);
            System.out.println(String.format(">> Directory: '%s' and number of uploaded docs: %d", currDataFolder, files.size()));

            lstDocs.removeAll();
            if (!docList.isEmpty()) {
                // Read documents
                DefaultListModel listModel = new DefaultListModel();
                listModel.addAll(docList);
                lstDocs.setModel(listModel);

                // Read the comment tree with its node depth
                TreeNode commentTree = FileUtils.readPostHierarchy(currDataFolder);
                commentDepthList = new HashMap<>();
                populateCommentDepth(commentTree);
            }

        } else {
            System.out.println(">> Error importing documents [" + currDataFolder + "]");
        }
    }

    /**
     *
     * @param node
     */
    private void populateCommentDepth(TreeNode node) {
        String nodeId = node.getValue();
        int nodeDepth = node.getDepth();
        commentDepthList.put(nodeId, nodeDepth);

        for (TreeNode child : node.getChildren()) {
            populateCommentDepth(child);
        }
    }

    /**
     *
     */
    private void refreshViewData() {
        acSelected.clear();

        // Refresh data of simple annotation view
        switch (currTabIndex) {
            case 0 -> {
                tblArgComponents.clearSelection();
                tblArgRelations.clearSelection();
                updatePanelData(edtSimpleAnnotation, tblArgComponents, tblArgRelations, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents));
                ArgaelFormUtils.updateCounterLabels(lblNumberArguments, tblArgComponents, "components (ACs)");
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations, tblArgRelations, "relations (ARs)");
                this.txtAnnotationPreview.setText("");
            }
            case 1 -> {
                tblArgRelations1.clearSelection();
                tblArgComponents1.clearSelection();
                tblArgRelations2.clearSelection();
                String targetUser = cmbTargetAnnotator.getSelectedItem().toString();
                updatePanelData(edtTargetAnnotation, null, tblArgRelations2, targetUser);
                updatePanelData(edtAssistedAnnotation, tblArgComponents1, tblArgRelations1, userName, "", ArgaelFormUtils.getSelectedACIdsFromCompTable(tblArgComponents1));
                ArgaelFormUtils.updateCounterLabels(lblNumberArguments1, tblArgComponents1, "components (ACs)");
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations1, tblArgRelations1, "relations (ARs)");
            }
            case 2 -> {
                tblEvalRelations.clearSelection();
                tblEvalComponents.clearSelection();
                String targetUser = cmbAnnotator.getSelectedItem().toString();
                updatePanelData(edtEvalAnnotation, tblEvalComponents, tblEvalRelations, targetUser, userName, ArgaelFormUtils.getSelectedACIdsFromCompTable(tblEvalComponents));
                ArgaelFormUtils.updateCounterLabels(lblNumberArguments2, tblEvalComponents, "components (ACs)");
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations2, tblEvalRelations, "relations (ARs)");
                this.txtEvaluationPreview.setText("");
            }
            case 3 -> {
                List<ArgumentNode> arguments = getLlmArguments();
                String rawReport = getCurrentReport();
                String report = highlightReport(rawReport, arguments);
                ArgaelFormUtils.updateEditorContent(edtArgumentTree, report);

            }
            default -> {
            }
        }
    }

    /**
     * Saves user annotations.
     */
    private void saveUserAnnotations() {
        TableModel acModel = null;
        TableModel arModel = null;
        List<String[]> acAnnotations = new ArrayList<>();
        List<String[]> arAnnotations = new ArrayList<>();

        if (currTabIndex == 0) {
            acModel = tblArgComponents.getModel();
            arModel = tblArgRelations.getModel();

        } else if (currTabIndex == 1) {
            acModel = tblArgComponents1.getModel();
            arModel = tblArgRelations1.getModel();
        }

        // Loop through the rows
        for (int i = 0; i < acModel.getRowCount(); i++) {
            String acId = acModel.getValueAt(i, 0).toString();
            String acText = acModel.getValueAt(i, 1).toString();
            String acType = acModel.getValueAt(i, 2).toString();
            String dateStamp = formatter.formatDate(new Date());
            acAnnotations.add(new String[]{acId, acText, acType, userName, dateStamp});
        }

        // Loop through the rows
        for (int i = 0; i < arModel.getRowCount(); i++) {
            String arId = arModel.getValueAt(i, 0).toString();
            String acId1 = arModel.getValueAt(i, 1).toString();
            String acId2 = arModel.getValueAt(i, 2).toString();
            String relType = arModel.getValueAt(i, 3).toString();
            String relIntent = arModel.getValueAt(i, 4).toString();
            String dateStamp = formatter.formatDate(new Date());
            arAnnotations.add(new String[]{arId, acId1, acId2, relType, relIntent, userName, dateStamp});
        }

        // Save ACs results
        dataModel.saveArgCompAnnotations(currEntity, userName, acAnnotations);

        // Save ARs results
        dataModel.saveArgRelAnnotations(currEntity, userName, arAnnotations);
    }

    /**
     * Saves user evaluations.
     */
    private void saveUserEvaluations() {
        String targetUser = cmbAnnotator.getSelectedItem().toString();
        List<String[]> acEvaluations = new ArrayList<>();
        List<String[]> arEvaluations = new ArrayList<>();

        // Loop through the rows
        TableModel acModel = tblEvalComponents.getModel();
        for (int i = 0; i < acModel.getRowCount(); i++) {
            if (acModel.getValueAt(i, 3) != null) {
                String acId = acModel.getValueAt(i, 0).toString();
                String acQuality = acModel.getValueAt(i, 3).toString();
                String dateStamp = formatter.formatDate(new Date());
                acEvaluations.add(new String[]{acId, acQuality, userName, dateStamp});
            }
        }

        // Loop through the rows
        TableModel arModel = tblEvalRelations.getModel();
        for (int i = 0; i < arModel.getRowCount(); i++) {
            if (arModel.getValueAt(i, 5) != null) {
                String arId = arModel.getValueAt(i, 0).toString();
                String arQuality = arModel.getValueAt(i, 5).toString();
                String dateStamp = formatter.formatDate(new Date());
                arEvaluations.add(new String[]{arId, arQuality, userName, dateStamp});
            }
        }

        // Save ACs results
        dataModel.saveArgCompEvaluations(currEntity, userName, targetUser, acEvaluations);

        // Save ARs results
        dataModel.saveArgRelEvaluations(currEntity, userName, targetUser, arEvaluations);
    }

    /**
     *
     */
    private void saveViewData() {
        if (!StringUtils.isEmpty(currEntity)) {
            if (currTabIndex == 0 || currTabIndex == 1) {
                saveUserAnnotations();

            } else if (currTabIndex == 2) {
                saveUserEvaluations();
            }
        }
    }

    /**
     * Sets the current user of the system.
     */
    private void setAppUsers() {
        String[] users = getUserList();
        String result = (String) JOptionPane.showInputDialog(this, "Annotator:", "Select", JOptionPane.PLAIN_MESSAGE, null, users, "");

        if (result != null && result.length() > 0) {
            userName = result;
        } else {
            userName = "admin";
        }

        List<String> userList = new ArrayList<>(Arrays.asList(users));
        userList.add(0, "-");
        userList.remove(userName);
        ArgaelFormUtils.setComboBoxModel(this.cmbAnnotator, userList);
        ArgaelFormUtils.setComboBoxModel(this.cmbTargetAnnotator, userList);
        this.menuUser.setText("| User: " + userName);
    }

    /**
     *
     */
    private void setComboBoxes() {
        List<String> components = argModel.getArgumentComponents();
        List<String> relCategories = argModel.getRelationCategories();
        List<String> relIntents = argModel.getRelationIntents();

        components.add(0, "-");
        ArgaelFormUtils.setComboBoxModel(this.cmbACType, components);
        ArgaelFormUtils.setComboBoxModel(this.cmbACType1, components);

        relCategories.add(0, "-");
        ArgaelFormUtils.setComboBoxModel(this.cmbCategory, relCategories);
        ArgaelFormUtils.setComboBoxModel(this.cmbCategory1, relCategories);

        relIntents.add(0, "-");
        ArgaelFormUtils.setComboBoxModel(this.cmbIntent, relIntents);
        ArgaelFormUtils.setComboBoxModel(this.cmbIntent1, relIntents);

        // Change vertical size of combo-boxes when they are open
        this.cmbCategory.setMaximumRowCount(this.cmbCategory.getModel().getSize());
        this.cmbCategory1.setMaximumRowCount(this.cmbCategory1.getModel().getSize());
    }

    /**
     *
     */
    private void setTablesLookAndFeel() {
        TableColumnModel colModel;

        // Argument quality selector
        List<String> qualityMetrics = argModel.getQualityMetrics();
        javax.swing.JComboBox cmbArgQuality = new javax.swing.JComboBox();
        ArgaelFormUtils.setComboBoxModel(cmbArgQuality, qualityMetrics);

        // Default column renderer
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);

        // ComboBox column renderer
        DefaultTableCellRenderer evalRenderer = new DefaultTableCellRenderer();
        evalRenderer.setToolTipText("Click to select the quality of the argument unit.");

        // Table 1: Argument Component Units
        colModel = tblArgComponents.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(210);
        colModel.getColumn(2).setPreferredWidth(90);
        colModel.getColumn(2).setCellRenderer(centerRenderer);

        // Table 2: Argument Component Relations
        colModel = tblArgRelations.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(50);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(50);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(110);
        colModel.getColumn(4).setPreferredWidth(90);
        colModel.getColumn(4).setCellRenderer(centerRenderer);

        // Table 3: Argument Relations Units
        colModel = tblArgRelations2.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(60);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(60);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(60);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(238);
        colModel.getColumn(4).setPreferredWidth(100);
        colModel.getColumn(4).setCellRenderer(centerRenderer);

        // Table 4: Argument Component Units
        colModel = tblArgComponents1.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(296);
        colModel.getColumn(2).setPreferredWidth(90);
        colModel.getColumn(2).setCellRenderer(centerRenderer);

        // Table 5: Argument Component Relations
        colModel = tblArgRelations1.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(50);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(50);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(150);
        colModel.getColumn(4).setPreferredWidth(100);
        colModel.getColumn(4).setCellRenderer(centerRenderer);

        // Table 6: Evaluation Argument Component Units
        colModel = tblEvalComponents.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(200);
        colModel.getColumn(2).setPreferredWidth(130);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(120);
        colModel.getColumn(3).setCellRenderer(evalRenderer);
        colModel.getColumn(3).setCellEditor(new DefaultCellEditor(cmbArgQuality));

        // Table 7: Evaluation Argument Component Relations
        colModel = tblEvalRelations.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(50);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(50);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(120);
        colModel.getColumn(4).setPreferredWidth(110);
        colModel.getColumn(4).setCellRenderer(centerRenderer);
        colModel.getColumn(5).setPreferredWidth(120);
        colModel.getColumn(5).setCellRenderer(evalRenderer);
        colModel.getColumn(5).setCellEditor(new DefaultCellEditor(cmbArgQuality));
    }

    /**
     *
     * @param editor
     * @param acTable
     * @param arTable
     * @param dataUser
     */
    private void updatePanelData(javax.swing.JEditorPane editor, javax.swing.JTable acTable, javax.swing.JTable arTable, String dataUser) {
        updatePanelData(editor, acTable, arTable, dataUser, "", new ArrayList<>());
    }

    /**
     *
     * @param editor
     * @param acTable
     * @param arTable
     * @param dataUser
     * @param evalUser
     */
    private void updatePanelData(javax.swing.JEditorPane editor, javax.swing.JTable acTable, javax.swing.JTable arTable, String dataUser, String evalUser, List<Integer> selectedACIds) {

        // Get annotation data
        Map<String, List<String[]>> annotations = getUserAnnotations(dataUser);
        List<String[]> acData = annotations.get(IOManager.FILE_ARG_COMP);
        List<String[]> arData = annotations.get(IOManager.FILE_ARG_REL);

        // Get evaluation data
        Map<Integer, String> acEval = null;
        Map<Integer, String> arEval = null;
        if (!StringUtils.isEmpty(evalUser)) {
            Map<String, Map<Integer, String>> evaluations = getUserEvaluations(dataUser, evalUser);
            acEval = evaluations.get(IOManager.FILE_ARG_COMP);
            arEval = evaluations.get(IOManager.FILE_ARG_REL);
        }

        // Update editor report
        if (editor != null) {
            String rawReport = getCurrentReport();
            String report = highlightReport(rawReport, acData, selectedACIds);
            ArgaelFormUtils.updateEditorContent(editor, report);
        }

        // Update arguments components table
        if (acTable != null) {
            try {
                DefaultTableModel acModel = ArgaelFormUtils.getTableModel(acTable);
                ArgaelFormUtils.loadArgTableData(acModel, acData, acEval, 3);
            } catch (Exception ex) {
                Logger.getLogger(ArgaelForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // Update arguments relations table
        if (arTable != null) {
            try {
                DefaultTableModel arModel = ArgaelFormUtils.getTableModel(arTable);
                ArgaelFormUtils.loadArgTableData(arModel, arData, arEval, 5);
            } catch (Exception ex) {
                Logger.getLogger(ArgaelForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Refresh current view data.
     */
    private void updateViewData() {
        if (!StringUtils.isEmpty(currEntity) && currTabIndex > -1) {
            System.out.println(" - Refresh data for view: " + tabbedPane.getTitleAt(currTabIndex) + ", and doc: " + currEntity);
            refreshViewData();
        }
    }

    // We create a custom Comparator called ColumnLengthComparator that compares two elements based on the length of the specified column
    class ColumnLengthComparator implements Comparator<String[]> {

        private final int columnIndex;

        public ColumnLengthComparator(int columnIndex) {
            this.columnIndex = columnIndex;
        }

        @Override
        public int compare(String[] o1, String[] o2) {
            String column1 = o1[columnIndex];
            String column2 = o2[columnIndex];
            return Integer.compare(column1.length(), column2.length());
        }
    }

}
